<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards">

	<!-- See https://github.com/squizlabs/PHP_CodeSniffer/wiki/Annotated-ruleset.xml -->
	<!-- See https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/blob/develop/WordPress-Core/ruleset.xml -->

	<!-- Set a description for this ruleset. -->
	<description>Apply WordPress Coding Standards</description>

	<!-- Only scan PHP files. -->
	<arg name="extensions" value="php"/>

	<!-- Whenever possible, cache the scan results and re-use those for unchanged files on the next scan. -->
	<arg name="cache"/>

	<!-- Set the memory limit to 256M.
		For most standard PHP configurations, this means the memory limit will temporarily be raised.
		Ref: https://github.com/squizlabs/PHP_CodeSniffer/wiki/Advanced-Usage#specifying-phpini-settings
	-->
	<ini name="memory_limit" value="256M"/>

	<!-- Strip the file paths down to the relevant bit. -->
	<arg name="basepath" value="./"/>

	<!-- Show sniff codes in all reports. -->
	<arg value="ps"/>

	<!-- What to scan. -->
	<file>.</file>

	<!-- Include the WordPress-Extra ruleset, with some WDS exclusions. -->
	<rule ref="WordPress-Extra">
		<!-- Allow array short syntax. -->
		<exclude name="Generic.Arrays.DisallowShortArraySyntax" />
		<!-- Allow short prefixes. -->
		<exclude name="WordPress.NamingConventions.PrefixAllGlobals.ShortPrefixPassed"/>
		<exclude name="Generic.WhiteSpace.ScopeIndent.IncorrectExact" />
		<exclude name="Generic.WhiteSpace.ScopeIndent.Incorrect" />
		<exclude name="PEAR.Functions.FunctionCallSignature.Indent" />
		<exclude name="WordPress.Files.FileName.NotHyphenatedLowercase" />
		<exclude name="WordPress.Arrays.ArrayDeclarationSpacing.AssociativeKeyFound" />
	</rule>

	<!-- Include WordPress-Docs -->
	<rule ref="WordPress-Docs"/>

	<!--
		Configure text_domain for I18n.
		https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#properties-strongly-recommended-to-be-set
	-->
	<rule ref="WordPress.WP.I18n">
		<properties>
			<!-- Value: replace the text domain used. -->
			<property name="text_domain" type="array" value="wdunderscores"/>
		</properties>
	</rule>

	<!--
		We're PSR-4 autoloading, skip the "class-whatever" naming convention.
		https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#disregard-class-file-name-rules
	-->
	<rule ref="WordPress.Files.FileName">
		<properties>
			<property name="strict_class_file_names" value="false"/>
		</properties>
	</rule>

	<!-- Use WordPress PHP Compatibility. -->
	<rule ref="PHPCompatibilityWP"/>

	<!-- Doc block alignments -->
	<rule ref="Squiz.Commenting.DocCommentAlignment" />

	<!-- In some cases this isn't possible to catch. -->
	<rule ref="Squiz.PHP.DisallowMultipleAssignments.Found">
		<severity>0</severity>
	</rule>

	<!--
	Support concatenated function calls.

	This allows the following type of function call:

	    thing( 'par1', [
		    'par2array1',
		    'par2array2',
	    ] );


	...which WPCS usually makes you do:

	    $array = [
		    'par2array1',
		    'par2array2',
	    ];

	    thing( 'par1', $array );

	We commonly use condensed functions in themes, so let's keep them around.

	@since 1.2.0
	@author Aubrey Portwood <aubrey@webdevstudios.com>
	-->
	<rule ref="PEAR.Functions.FunctionCallSignature">
	  <properties>
	    <property name="requiredSpacesAfterOpen" value="1"/>
	    <property name="requiredSpacesBeforeClose" value="1"/>
	  </properties>
	  <severity>0</severity>
	</rule>

	<!--
	Supports the concatenated function calls above.

	@since 1.2.0
	@author Aubrey Portwood <aubrey@webdevstudios.com>
	-->
	<rule ref="PEAR.Functions.FunctionCallSignature.SpaceAfterOpenBracket" />
	<rule ref="PEAR.Functions.FunctionCallSignature.SpaceBeforeCloseBracket" />

	<!-- What not to scan. -->
	<exclude-pattern>/.git/</exclude-pattern>
	<exclude-pattern>/.github/</exclude-pattern>
	<exclude-pattern>/vendor/</exclude-pattern>
	<exclude-pattern>/node_modules/</exclude-pattern>
	<exclude-pattern>/tests/</exclude-pattern>
</ruleset>
